{"version":3,"sources":["logo.svg","services/PruebaChiCuadrado.js","services/Generadores.js","pages/TP3.js","App.js","reportWebVitals.js","index.js"],"names":["PruebaChiCuadrado","numIntervalos","muestra","generador","confianza","generarIntervalos","length","paso","i","min","parseFloat","toFixed","max","mc","data","push","getLimites","minLimite","contarFrecuenciaMuestra","counter","calcularFrecuenciaEsperada","x","intervaloLength","getDensidad","calcularColumnas","forEach","row","fo","fe","aux1","aux2","Math","pow","aux3","c","getGradosDeLibertad","calcularChiCuadrado","verificarChiCuadrado","this","Uniforme","a","b","k","calcularRandom","random","getMedia","getVarianza","getGradosLibertad","Exponencial","lambda","log","E","Normal","media","desviacion","r1","r2","sqrt","cos","PI","sin","r","Poisson","p","factorialize","num","TP3","useState","setK","n","setN","setMuestra","chiInstance","setChiInstance","rows","setRows","chartData","setChartData","generatorType","setGeneratorType","setA","setB","setMedia","setDesviacion","setLambda","generadorInstance","setGeneradorInstance","useEffect","chi","aux","randomNumber","generarMuestra","auxChartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","style","width","display","verticalAlign","textAlign","type","value","onChange","e","Number","parseInt","target","marginLeft","disabled","map","item","col1","col2","col3","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAAe,I,mBCATA,EACF,WAAYC,EAAeC,EAASC,GAA2B,IAAD,OAAfC,EAAe,uDAAL,IAAK,yBAQ9DC,kBAAoB,WAChB,IAAK,EAAKF,WAAa,EAAKD,QAAQI,OAAO,EAEvC,IADA,IAAMC,EAAO,EAAE,EAAKN,cACZO,EAAE,EAAEA,EAAE,EAAKP,cAAcO,IAAI,CACjC,IAAMC,EAAMC,YAAYF,EAAED,GAAMI,QAAQ,IAClCC,EAAMF,aAAaF,EAAE,GAAGD,GAAMI,QAAQ,IACtCE,EAAKH,aAAaD,EAAIG,GAAK,GAAGD,QAAQ,IAC5C,EAAKG,KAAKC,KAAK,CACXN,MACAG,MACAC,YAGL,GAAG,EAAKV,WAAa,EAAKD,QAAQI,OAGrC,IAH6C,IAAD,EACd,EAAKH,UAAUa,WAAW,EAAKd,SADjB,mBACrCe,EADqC,KAEtCV,GAFsC,KAEpBU,GAAW,EAAKhB,cAChCO,EAAE,EAAEA,EAAE,EAAKP,cAAcO,IAAI,CACjC,IAAIC,EAAM,KAENA,EADI,IAAJD,EACME,WAAYO,EAAWN,QAAQ,IAE/B,EAAKG,KAAKN,EAAE,GAAGI,IAEzB,IAAMA,EAAMF,YAAYD,EAAIF,GAAMI,QAAQ,IACpCE,EAAKH,aAAaD,EAAIG,GAAK,GAAGD,QAAQ,IAC5C,EAAKG,KAAKC,KAAK,CACXN,MACAG,MACAC,YAIR,EAAKC,KAAO,IAxC0C,KA4C9DI,wBAA0B,SAACT,EAAIG,GAE3B,IADA,IAAIO,EAAU,EACNX,EAAE,EAAEA,EAAE,EAAKN,QAAQI,OAAOE,IAC3B,EAAKN,QAAQM,IAAIC,GAAO,EAAKP,QAAQM,GAAGI,IACvCO,GAAS,GAGjB,OAAOA,GAnDmD,KAsD9DC,2BAA6B,SAACC,EAAEC,GAC5B,OAAI,EAAKnB,UACEO,YAAY,EAAKP,UAAUoB,YAAYF,GAAGC,EAAgB,EAAKpB,QAAQI,QAAQK,QAAQ,IAE3FD,YAAY,EAAKR,QAAQI,OAAO,EAAKL,eAAeU,QAAQ,KA1DT,KA6D9Da,iBAAmB,WACf,EAAKV,KAAKW,SAAQ,SAACC,EAAIlB,GACnB,IAAMmB,EAAK,EAAKT,wBAAwBQ,EAAIjB,IAAIiB,EAAId,KAC9CgB,EAAK,EAAKR,2BAA2BM,EAAIb,GAAIa,EAAId,IAAIc,EAAIjB,KACzDoB,EAAOnB,YAAYiB,EAAGC,GAAIjB,QAAQ,IAClCmB,EAAOpB,WAAYqB,KAAKC,IAAIH,EAAK,GAAIlB,QAAQ,IAC7CsB,EAAW,GAAJL,EAAMlB,YAAYoB,EAAKF,GAAIjB,QAAQ,IAAI,EAC9CuB,EAAS,GAAL1B,EAASyB,EAAOvB,YAAY,EAAKI,KAAKN,EAAE,GAAG0B,EAAED,GAAMtB,QAAQ,IACrEe,EAAG,GAAQC,EACXD,EAAG,GAASE,EACZF,EAAG,KAAWG,EACdH,EAAG,KAAWI,EACdJ,EAAG,KAAWO,EACdP,EAAG,EAAQQ,MA1E2C,KA8E9DC,oBAAsB,WAClB,OAAO,EAAKlC,cAAc,GA/EgC,KAkF9DmC,oBAAsB,WAClB,EAAK/B,oBACL,EAAKmB,oBApFqD,KAuF9Da,qBAAuB,WACnB,MAAO,IAvFPC,KAAKrC,cAAcA,EACnBqC,KAAKpC,QAAUA,EACfoC,KAAKlC,UAAYA,EACjBkC,KAAKnC,UAAYA,EACjBmC,KAAKxB,KAAO,ICuDdyB,EACF,WAAYC,EAAEC,EAAEC,GAAG,IAAD,gCAMlBC,eAAiB,WACb,OAAOjC,YAAY,EAAK8B,EAAET,KAAKa,UAAU,EAAKH,EAAE,EAAKD,IAAI7B,QAAQ,KAPnD,KAUlBkC,SAAW,WACP,OAAOnC,aAAa,EAAK8B,EAAE,EAAKC,GAAG,GAAG9B,QAAQ,KAXhC,KAclBmC,YAAc,WACV,OAAOpC,YAAYqB,KAAKC,IAAI,EAAKS,EAAE,EAAKD,EAAE,GAAG,IAAI7B,QAAQ,KAf3C,KAkBlBY,YAAc,WACV,OAAOb,YAAY,GAAG,EAAK+B,EAAE,EAAKD,IAAI7B,QAAQ,KAnBhC,KAsBlBK,WAAa,WACT,MAAO,CAAC,EAAKwB,EAAE,EAAKC,IAvBN,KA0BlBM,kBAAoB,WAChB,OAAO,EAAKL,EAAE,GA1BdJ,KAAKE,EAAEA,EACPF,KAAKG,EAAEA,EACPH,KAAKI,EAAEA,GA4BTM,EACF,WAAYC,EAAOP,GAAG,IAAD,gCAKrBC,eAAiB,WACb,OAAOjC,YAAa,EAAE,EAAKuC,OAAQlB,KAAKmB,IAAI,EAAEnB,KAAKa,UAAUjC,QAAQ,KANpD,KASrBkC,SAAW,WACP,OAAOnC,YAAY,EAAE,EAAKuC,QAAQtC,QAAQ,KAVzB,KAarBmC,YAAc,WACV,OAAOpC,YAAY,EAAEqB,KAAKC,IAAI,EAAKiB,OAAO,IAAItC,QAAQ,KAdrC,KAiBrBY,YAAc,SAACF,GACX,OAAOX,YAAY,EAAKuC,OAAOlB,KAAKC,IAAID,KAAKoB,GAAI,EAAE,EAAKF,OAAO5B,IAAKV,QAAQ,KAlB3D,KAqBrBK,WAAa,WACT,MAAO,CAAC,EAAE,IAtBO,KAyBrB+B,kBAAoB,WAChB,OAAO,EAAKL,EAAE,GAzBdJ,KAAKW,OAASA,EACdX,KAAKI,EAAIA,GA4BXU,EACF,WAAYC,EAAMC,EAAWZ,GAAG,IAAD,gCAM/BC,eAAiB,WACb,IAAMY,EAAKxB,KAAKa,SACVY,EAAKzB,KAAKa,SAGhB,MAAO,CAFIlC,YAAYqB,KAAK0B,MAAM,EAAE1B,KAAKmB,IAAIK,IAAKxB,KAAK2B,IAAI,EAAE3B,KAAK4B,GAAGH,GAAI,EAAKF,WAAW,EAAKD,OAAO1C,QAAQ,IAClGD,YAAYqB,KAAK0B,MAAM,EAAE1B,KAAKmB,IAAIK,IAAKxB,KAAK6B,IAAI,EAAE7B,KAAK4B,GAAGH,GAAI,EAAKF,WAAW,EAAKD,OAAO1C,QAAQ,MAVlF,KAc/BkC,SAAW,WACP,OAAO,EAAKQ,OAfe,KAkB/BP,YAAc,WACV,OAAOpC,WAAYqB,KAAKC,IAAI,EAAKsB,WAAW,GAAI3C,QAAQ,KAnB7B,KAsB/BY,YAAc,SAACF,GACX,OAAOX,WAAY,GAAG,EAAK4C,WAAWvB,KAAK0B,KAAK,EAAE1B,KAAK4B,KAAM5B,KAAKC,IAAID,KAAKoB,GAAI,GAAIpB,KAAKC,KAAKX,EAAE,EAAKgC,OAAO,EAAKC,WAAW,KAAM3C,QAAQ,IAvB9G,KA0B/BK,WAAa,SAACd,GACX,IAAIO,EAAM,EACNG,EAAM,EAQV,OAPAV,EAAQuB,SAAQ,SAAAoC,GACTA,GAAGjD,EACFA,EAAIiD,EACCA,GAAGpD,IACXA,EAAIoD,MAGF,CAACpD,EAAIG,IApCgB,KAuC/BmC,kBAAoB,WAChB,OAAO,EAAKL,EAAE,GAvCdJ,KAAKe,MAAQA,EACbf,KAAKgB,WAAaA,EAClBhB,KAAKI,EAAIA,GA0CXoB,EACF,WAAYb,EAAOP,GAAG,IAAD,gCAKrBC,eAAiB,WAad,IAAIoB,EAAI,EACJ1C,GAAK,EACLmB,EAAIT,KAAKC,IAAID,KAAKoB,GAAG,EAAE,EAAKF,QAChC,EAAG,CAEFc,GADUhC,KAAKa,SAEfvB,GAAM,QACE0C,GAAGvB,GAEZ,OAAOnB,GA3BW,KA8BrBwB,SAAW,WACP,OAAOnC,WAAY,EAAKuC,OAAQtC,QAAQ,KA/BvB,KAkCrBmC,YAAc,WACV,OAAOpC,WAAY,EAAKuC,OAAQtC,QAAQ,KAnCvB,KAsCrBY,YAAc,SAACF,GACX,OAAOX,YAAaqB,KAAKC,IAAI,EAAKiB,OAAO5B,GAAKU,KAAKC,IAAID,KAAKoB,GAAG,EAAE,EAAKF,QAAU,EAAKe,aAAa3C,IAAIV,QAAQ,KAvC7F,KA0CrBqD,aAAe,SAACC,GACZ,GAAY,IAARA,GAAqB,IAARA,EACf,OAAO,EACT,IAAK,IAAIzD,EAAIyD,EAAM,EAAGzD,GAAK,EAAGA,IAC5ByD,GAAOzD,EAET,OAAOyD,GAhDU,KAmDrBjD,WAAa,SAACd,GACV,IAAIO,EAAM,EACNG,EAAM,EAQV,OAPAV,EAAQuB,SAAQ,SAAAoC,GACTA,GAAGjD,EACFA,EAAIiD,EACCA,GAAGpD,IACXA,EAAIoD,MAGF,CAACpD,EAAIG,IA7DK,KAgErBmC,kBAAoB,WAChB,OAAO,EAAKL,EAAE,GAhEdJ,KAAKW,OAASA,EACdX,KAAKI,EAAIA,G,eCmJFwB,EA3TH,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACPzB,EADO,KACL0B,EADK,OAEGD,mBAAS,GAFZ,mBAEPE,EAFO,KAELC,EAFK,OAGeH,mBAAS,IAHxB,mBAGPjE,EAHO,KAGCqE,EAHD,OAKwBJ,qBALxB,mBAKPK,EALO,KAKMC,EALN,OAMSN,mBAAS,IANlB,mBAMPO,EANO,KAMFC,EANE,OAOoBR,mBAAS,IAP7B,mBAOPS,EAPO,KAOIC,EAPJ,OAU4BV,mBAAS,GAVrC,mBAUPW,EAVO,KAUQC,EAVR,OAYIZ,qBAZJ,mBAYP3B,EAZO,KAYJwC,EAZI,OAaIb,qBAbJ,mBAaP1B,EAbO,KAaJwC,EAbI,OAcYd,qBAdZ,mBAcPd,EAdO,KAcA6B,EAdA,OAesBf,qBAftB,mBAePb,EAfO,KAeK6B,EAfL,OAgBchB,qBAhBd,oBAgBPlB,GAhBO,MAgBCmC,GAhBD,SAkBoCjB,mBAAS,MAlB7C,qBAkBPkB,GAlBO,MAkBYC,GAlBZ,MA+Hd,OAxFAC,qBAAU,WAGN,OAFAjB,EAAK,GACLG,EAAe,MACRK,GACH,KAAK,EAEGQ,GADD9C,GAAKC,EACiB,IAAIF,EAASC,EAAEC,EAAEC,GAEjB,MAEzB,MACJ,KAAK,EAEG4C,GADDrC,GACsB,IAAID,EAAYC,GAAOP,GAEvB,MAEzB,MACJ,KAAK,EAED4C,GADGjC,GAASC,EACS,IAAIF,EAAOC,EAAMC,EAAWZ,GAExB,MAEzB,MACJ,KAAK,EAEG4C,GADDrC,GACsB,IAAIa,EAAQb,GAAOP,GAEnB,MAEzB,MACJ,QACI4C,GAAqB,SAE/B,CAACR,EAActC,EAAEC,EAAEY,EAAMC,EAAWL,KAEtCsC,qBAAU,WACN,IAAMC,EAAM,IAAIxF,EAAkB0C,EAAExC,EAAQmF,IAC5CG,EAAIpD,sBACJqC,EAAee,KACjB,CAACtF,EAAQwC,IAEX6C,qBAAU,WACNhB,EA/DmB,WACnB,IAAMkB,EAAM,GACZ,GAAGJ,GACC,GAAmB,IAAhBP,EACC,IAAK,IAAItE,EAAG,EAAEA,EAAE6D,EAAE7D,GAAI,EAAE,CAAC,IAAD,EACJ6E,GAAkB1C,iBADd,mBACbY,EADa,KACVC,EADU,KAEpBiC,EAAI1E,KAAKwC,GACTkC,EAAI1E,KAAKyC,QAGb,IAAK,IAAIhD,EAAG,EAAEA,EAAE6D,EAAE7D,IAAI,CAClB,IAAMkF,EAAeL,GAAkB1C,iBACvC8C,EAAI1E,KAAK2E,GAIrB,OAAOD,EA+CIE,MACZ,CAACtB,IAEJkB,qBAAU,WACHf,GACCG,EAAQH,EAAY1D,QAE1B,CAAC0D,IAEHe,qBAAU,WACN,IAAMK,EAAe,CACjBC,OAAO,GACPC,SAAS,CACL,CACIC,MAAM,KACNjF,KAAK,GACLkF,gBAAiB,CACjB,2BAEAC,YAAa,CACb,yBAEAC,YAAa,GAEjB,CACIH,MAAM,KACNjF,KAAK,GACLkF,gBAAiB,CACjB,2BAEAC,YAAa,CACb,yBAEAC,YAAa,KAGzBxB,EAAKjD,SAAQ,SAAAC,GACTkE,EAAaC,OAAO9E,KAAKW,EAAIb,IAC7B+E,EAAaE,SAAS,GAAGhF,KAAKC,KAAKW,EAAIC,IACvCiE,EAAaE,SAAS,GAAGhF,KAAKC,KAAKW,EAAIE,OAE3CiD,EAAae,KACf,CAAClB,IAGH,qCACA,yDACA,sBACIyB,MAAO,CACHC,MAAM,MACNC,QAAQ,eACRC,cAAc,MACdC,UAAU,SALlB,UAOI,gCACI,uCACA,uBACIC,KAAK,SACLC,MAAO/D,EACPgE,SAAU,SAACC,GACPvC,EAAKwC,OAAOC,SAASF,EAAEG,OAAOL,cAI1C,gCACI,uCACA,uBACID,KAAK,SACLC,MAAOpC,EACPqC,SAAU,SAACC,GACPrC,EAAKsC,OAAOC,SAASF,EAAEG,OAAOL,iBAK9C,sBACIN,MAAO,CACHC,MAAM,MACNC,QAAQ,eACRC,cAAc,MACdC,UAAU,OACVQ,WAAW,OANnB,UAQI,oDACA,yBACIL,SAAW,SAAAC,GACP5B,EAAiB6B,OAAOC,SAASF,EAAEG,OAAOL,SAFlD,UAKI,wBAAQA,MAAM,IAAd,sBACA,wBAAQA,MAAM,IAAd,yBACA,wBAAQA,MAAM,IAAd,oBACA,wBAAQA,MAAM,IAAd,wBAGgB,IAAlB3B,GACE,qCACI,gCACI,uCACA,uBACI0B,KAAK,SACLC,MAAOjE,EACPkE,SAAU,SAACC,GACP3B,EAAK4B,OAAOC,SAASF,EAAEG,OAAOL,cAI1C,gCACI,uCACA,uBACID,KAAK,SACLC,MAAOhE,EACPiE,SAAU,SAACC,GACP1B,EAAK2B,OAAOC,SAASF,EAAEG,OAAOL,iBAM9B,IAAlB3B,GACE,qCACI,gCACI,0CACA,uBACI0B,KAAK,SACLC,MAAOpD,EACPqD,SAAU,SAACC,GACPzB,EAAS0B,OAAOC,SAASF,EAAEG,OAAOL,cAI9C,gCACI,4CACA,uBACID,KAAK,SACLC,MAAOnD,EACPoD,SAAU,SAACC,GACPxB,EAAcyB,OAAOC,SAASF,EAAEG,OAAOL,kBAMtC,IAAlB3B,GAAyC,IAAlBA,IACtB,mCACI,gCACI,4CACA,uBACI0B,KAAK,SACLC,MAAOxD,GACPyD,SAAU,SAACC,GACPvB,GAAUwB,OAAOC,SAASF,EAAEG,OAAOL,gBAMrDpB,IACE,mCACI,gCACI,4DACA,uBACImB,KAAK,SACLQ,UAAU,EACVP,MAAOpB,GAAkBtC,8BAS7C,gCACI,sBAAKoD,MAAO,CACRC,MAAM,MACNC,QAAQ,eACRC,cAAc,OAHlB,UAKI,yCACA,kCACI,kCACI,mCACA,uCAEJ,gCACCpG,EAAQ+G,KAAK,SAACC,EAAK1G,GAAN,OACV,+BACI,6BAAKA,EAAE,IAAO,6BAAK0G,kBAKnC,sBAAKf,MAAO,CACRC,MAAM,MACNC,QAAQ,eACRU,WAAW,OAHf,UAKA,kCACI,kCACI,mCACA,qCACA,qCACA,oCACA,oCACA,oCACA,uCACA,2CACA,8CACA,6DAEJ,gCACKrC,EAAKuC,KAAI,SAACvF,EAAIlB,GAAL,OAAU,+BAChB,6BAAKA,EAAE,IACP,6BAAKkB,EAAIjB,MACT,6BAAKiB,EAAId,MACT,6BAAKc,EAAIb,KACT,6BAAKa,EAAIC,KACT,6BAAKD,EAAIE,KACT,6BAAKF,EAAIyF,OACT,6BAAKzF,EAAI0F,OACT,6BAAK1F,EAAI2F,OACT,6BAAK3F,EAAIQ,eAIrB,cAAC,IAAD,CAAKpB,KAAM8D,cC9SJ0C,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.351f5bb3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","class PruebaChiCuadrado{\n    constructor(numIntervalos, muestra, generador ,confianza=0.95){\n        this.numIntervalos=numIntervalos;\n        this.muestra = muestra;\n        this.confianza = confianza;\n        this.generador = generador;\n        this.data = [];\n    }\n\n    generarIntervalos = () => {\n        if (!this.generador && this.muestra.length>0){\n            const paso = 1/this.numIntervalos;\n            for(let i=0;i<this.numIntervalos;i++){\n                const min = parseFloat((i*paso).toFixed(4));\n                const max = parseFloat(((i+1)*paso).toFixed(4));\n                const mc = parseFloat(((min+max)/2).toFixed(4));\n                this.data.push({\n                    min,\n                    max,\n                    mc,\n                })\n            }\n        } else if(this.generador && this.muestra.length){\n            const [minLimite,maxLimite] = this.generador.getLimites(this.muestra);\n            const paso = (maxLimite-minLimite)/this.numIntervalos;\n            for(let i=0;i<this.numIntervalos;i++){\n                let min = null;\n                if (i===0) {\n                    min = parseFloat((minLimite).toFixed(4));\n                } else {\n                    min = this.data[i-1].max;\n                }\n                const max = parseFloat((min+paso).toFixed(4));\n                const mc = parseFloat(((min+max)/2).toFixed(4));\n                this.data.push({\n                    min,\n                    max,\n                    mc,\n                })\n            }\n        } else {\n            this.data = [];\n        }\n    }\n\n    contarFrecuenciaMuestra = (min,max) => {\n        let counter = 0;\n        for(let i=0;i<this.muestra.length;i++){\n            if(this.muestra[i]>=min && this.muestra[i]<max){\n                counter+=1;\n            }\n        }\n        return counter;\n    }\n\n    calcularFrecuenciaEsperada = (x,intervaloLength)=>{\n        if (this.generador) {\n            return parseFloat((this.generador.getDensidad(x)*intervaloLength*this.muestra.length).toFixed(4));\n        }\n        return parseFloat((this.muestra.length/this.numIntervalos).toFixed(4));\n    }\n\n    calcularColumnas = () => {\n        this.data.forEach((row,i)=>{\n            const fo = this.contarFrecuenciaMuestra(row.min,row.max);\n            const fe = this.calcularFrecuenciaEsperada(row.mc, row.max-row.min);\n            const aux1 = parseFloat((fo-fe).toFixed(4));\n            const aux2 = parseFloat((Math.pow(aux1,2)).toFixed(4));\n            const aux3 = fe!=0?parseFloat((aux2/fe).toFixed(4)):0;\n            const c = i == 0 ? aux3 : parseFloat((this.data[i-1].c+aux3).toFixed(4));\n            row['fo']= fo;\n            row['fe'] = fe;\n            row['col1'] = aux1;\n            row['col2'] = aux2;\n            row['col3'] = aux3;\n            row['c'] = c;\n        });\n    }\n\n    getGradosDeLibertad = ()=>{\n        return this.numIntervalos-1;\n    }\n\n    calcularChiCuadrado = ()=>{\n        this.generarIntervalos();\n        this.calcularColumnas();\n    }\n\n    verificarChiCuadrado = () => {\n        return {};\n    }  \n\n}\n\nexport {PruebaChiCuadrado}","class CongruencialMixto {\n    \n    constructor(x0,k,g,c){\n        this.a = this.calcularA(k);\n        this.m = this.calcularM(g);\n        this.c = c;\n        this.x0 = x0;\n    }\n\n    calcularA = k => {\n        return 4*k+1;\n    }\n\n    calcularM = g => {\n        return Math.pow(2,g);\n    }\n\n    calcularNextXi = (xi) => {\n        console.log(xi);\n        return (this.a*xi+this.c)%this.m;\n    }\n\n    calcularRandom = (xi) => {\n        return xi/(this.m-1);\n    }\n    \n    toString = ()=>{\n        return this.a+' '+this.m+' '+this.c;\n    }\n}\n\nclass CongruencialMultiplicativo {\n    \n    constructor(x0,k,g){\n        this.a = this.calcularA(k);\n        this.m = this.calcularM(g);\n        this.x0 = x0;\n    }\n\n    calcularA = k => {\n        return 8*k+3;\n    }\n\n    calcularM = g => {\n        return Math.pow(2,g);\n    }\n\n    calcularNextXi = (xi) => {\n        return (this.a*xi)%this.m;\n    }\n\n    calcularRandom = (xi) => {\n        return xi/(this.m-1);\n    }\n\n    toString = ()=>{\n        return this.a+' '+this.m;\n    }\n    \n}\n\nclass Uniforme {\n    constructor(a,b,k){\n        this.a=a;\n        this.b=b;\n        this.k=k;\n    }\n\n    calcularRandom = ()=>{\n        return parseFloat((this.a+Math.random()*(this.b-this.a)).toFixed(4));\n    }\n\n    getMedia = ()=>{\n        return parseFloat(((this.a+this.b)/2).toFixed(4));\n    }\n\n    getVarianza = ()=>{\n        return parseFloat((Math.pow(this.b-this.a,2)/12).toFixed(4));\n    }\n\n    getDensidad = ()=>{\n        return parseFloat((1/(this.b-this.a)).toFixed(4));\n    }\n\n    getLimites = ()=>{\n        return [this.a,this.b]\n    }\n\n    getGradosLibertad = ()=>{\n        return this.k-1;\n    }\n}\n\nclass Exponencial {\n    constructor(lambda,k){\n        this.lambda = lambda;\n        this.k = k;\n    }\n\n    calcularRandom = ()=>{\n        return parseFloat((-1/this.lambda)*Math.log(1-Math.random()).toFixed(4));\n    }\n\n    getMedia = () => {\n        return parseFloat((1/this.lambda).toFixed(4));\n    }\n\n    getVarianza = () => {\n        return parseFloat((1/Math.pow(this.lambda,2)).toFixed(4));\n    }\n\n    getDensidad = (x)=> {\n        return parseFloat((this.lambda*Math.pow(Math.E,(-1*this.lambda*x))).toFixed(4));\n    }\n\n    getLimites = ()=>{\n        return [0,1];\n    }\n\n    getGradosLibertad = ()=>{\n        return this.k-2;\n    }\n}\n\nclass Normal {\n    constructor(media,desviacion,k){\n        this.media = media;\n        this.desviacion = desviacion\n        this.k = k;\n    }\n\n    calcularRandom = ()=>{\n        const r1 = Math.random();\n        const r2 = Math.random();\n        const n1 = parseFloat((Math.sqrt(-2*Math.log(r1))*Math.cos(2*Math.PI*r2)*this.desviacion+this.media).toFixed(4));\n        const n2 = parseFloat((Math.sqrt(-2*Math.log(r1))*Math.sin(2*Math.PI*r2)*this.desviacion+this.media).toFixed(4));\n        return [n1,n2];\n    }\n\n    getMedia = () => {\n        return this.media;\n    }\n\n    getVarianza = () => {\n        return parseFloat((Math.pow(this.desviacion,2)).toFixed(4));\n    }\n\n    getDensidad = (x)=> {\n        return parseFloat((1/(this.desviacion*Math.sqrt(2*Math.PI)))*Math.pow(Math.E,(-0.5*Math.pow((x-this.media)/this.desviacion,2)))).toFixed(4);\n    }\n\n    getLimites = (muestra)=>{\n       let min = 0;\n       let max = 0;\n       muestra.forEach(r=>{\n           if(r>=max){\n               max=r;\n           }else if(r<=min){\n            min=r;\n           }\n       });\n       return [min,max];\n    }\n\n    getGradosLibertad = ()=>{\n        return this.k-3;\n    }\n\n}\n\nclass Poisson {\n    constructor(lambda,k){\n        this.lambda = lambda;\n        this.k = k;\n    }\n\n    calcularRandom = ()=>{\n        /*\n            P = 1;\n            X = -1;\n            A = e-λ;\n            Hacer\n            {\n            Generar U = RND(0,1);\n            P = P * U;\n            X = X + 1;\n            } mientras (P >= A);\n            Devolver X;\n        */\n       let p = 1;\n       let x = -1;\n       let a = Math.pow(Math.E,-1*this.lambda);\n       do {\n        const u = Math.random();\n        p = p*u;\n        x = x+1;\n       } while (p>=a);\n\n       return x;\n    }\n\n    getMedia = () => {\n        return parseFloat((this.lambda).toFixed(4));\n    }\n\n    getVarianza = () => {\n        return parseFloat((this.lambda).toFixed(4));\n    }\n\n    getDensidad = (x)=> {\n        return parseFloat(((Math.pow(this.lambda,x) * Math.pow(Math.E,-1*this.lambda))/ this.factorialize(x)).toFixed(4));\n    }\n\n    factorialize = (num) => {\n        if (num === 0 || num === 1)\n          return 1;\n        for (var i = num - 1; i >= 1; i--) {\n          num *= i;\n        }\n        return num;\n    }\n\n    getLimites = (muestra)=>{\n        let min = 0;\n        let max = 0;\n        muestra.forEach(r=>{\n            if(r>=max){\n                max=r;\n            }else if(r<=min){\n             min=r;\n            }\n        });\n        return [min,max];\n    }\n\n    getGradosLibertad = ()=>{\n        return this.k-2;\n    }\n}\n\nexport {\n    CongruencialMixto,\n    CongruencialMultiplicativo,\n    Uniforme,\n    Exponencial,\n    Normal,\n    Poisson,\n}","import {useState, useEffect} from 'react';\nimport { PruebaChiCuadrado } from '../services/PruebaChiCuadrado';\nimport { Uniforme, Exponencial, Normal, Poisson } from '../services/Generadores';\nimport { Bar } from 'react-chartjs-2';\n\nconst TP3 = () => {\n    const [k,setK] = useState(10);\n    const [n,setN] = useState(0);\n    const [muestra,setMuestra] = useState([]);\n\n    const [chiInstance, setChiInstance] = useState();\n    const [rows,setRows] = useState([]);\n    const [chartData, setChartData] = useState({});\n\n\n    const [generatorType, setGeneratorType] = useState(1);\n\n    const [a, setA] = useState();\n    const [b, setB] = useState();\n    const [media, setMedia] = useState();\n    const [desviacion, setDesviacion] = useState();\n    const [lambda, setLambda] = useState();\n\n    const [generadorInstance, setGeneradorInstance] = useState(null);\n\n    const generarMuestra = () => {\n        const aux = [];        \n        if(generadorInstance){\n            if(generatorType===3){\n                for( let i= 0;i<n;i=i+2){\n                    const [r1,r2] = generadorInstance.calcularRandom();    \n                    aux.push(r1);\n                    aux.push(r2)\n                }\n            }else{\n                for( let i= 0;i<n;i++){\n                    const randomNumber = generadorInstance.calcularRandom();    \n                    aux.push(randomNumber);\n                }\n            }\n        }\n        return aux;\n    };\n\n    useEffect(()=>{\n        setN(0);\n        setChiInstance(null);\n        switch(generatorType) {\n            case 1:\n                if(a && b){\n                    setGeneradorInstance(new Uniforme(a,b,k));\n                } else {\n                    setGeneradorInstance(null);\n                }\n                break;\n            case 2:\n                if(lambda) {\n                    setGeneradorInstance(new Exponencial(lambda,k));                \n                } else {\n                    setGeneradorInstance(null);\n                }\n                break;\n            case 3:\n                if(media && desviacion) {\n                setGeneradorInstance(new Normal(media,desviacion,k));\n                } else {\n                    setGeneradorInstance(null);\n                }\n                break;\n            case 4:\n                if(lambda) {\n                    setGeneradorInstance(new Poisson(lambda,k));\n                } else {\n                    setGeneradorInstance(null);\n                }\n                break;\n            default:\n                setGeneradorInstance(null);\n        }           \n    },[generatorType,a,b,media,desviacion,lambda]);\n\n    useEffect(()=>{\n        const chi = new PruebaChiCuadrado(k,muestra,generadorInstance);\n        chi.calcularChiCuadrado();\n        setChiInstance(chi);\n    },[muestra,k]);\n\n    useEffect(()=>{        \n        setMuestra(generarMuestra(n));        \n    }, [n]);   \n\n    useEffect(()=>{\n        if(chiInstance){\n            setRows(chiInstance.data);\n        }\n    },[chiInstance]);\n\n    useEffect(()=>{\n        const auxChartData = {\n            labels:[],\n            datasets:[\n                {\n                    label:'FO',\n                    data:[],\n                    backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',                    \n                    ],\n                    borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    ],\n                    borderWidth: 1,\n                },\n                {\n                    label:'FE',\n                    data:[],\n                    backgroundColor: [\n                    'rgba(54, 162, 235, 0.2)',                    \n                    ],\n                    borderColor: [\n                    'rgba(54, 162, 235, 1)',\n                    ],\n                    borderWidth: 1,\n                }],\n        };\n        rows.forEach(row=>{\n            auxChartData.labels.push(row.mc);\n            auxChartData.datasets[0].data.push(row.fo);\n            auxChartData.datasets[1].data.push(row.fe);\n        });\n        setChartData(auxChartData);\n    },[rows]);\n\n    return (\n    <>\n    <h1>TRABAJO PRÁCTICO N#3</h1>\n    <div \n        style={{\n            width:'48%',\n            display:'inline-block',\n            verticalAlign:'top',\n            textAlign:'right',\n    }}>\n        <div>\n            <label>K:</label>\n            <input \n                type='number' \n                value={k}\n                onChange={(e)=>{\n                    setK(Number.parseInt(e.target.value));\n                }}\n                />\n        </div>\n        <div>\n            <label>N:</label>\n            <input \n                type='number' \n                value={n}\n                onChange={(e)=>{\n                    setN(Number.parseInt(e.target.value));\n                }}\n            />\n        </div>\n    </div>\n    <div \n        style={{\n            width:'50%',\n            display:'inline-block',\n            verticalAlign:'top',\n            textAlign:'left',\n            marginLeft:'1em',\n    }}>\n        <label>Tipo Generador:</label>\n        <select\n            onChange={ e => {\n                setGeneratorType(Number.parseInt(e.target.value));\n            }}\n            > \n            <option value='1'>UNIFORME</option>\n            <option value='2'>EXPONENCIAL</option>\n            <option value='3'>NORMAL</option>\n            <option value='4'>POISSON</option>\n        </select>\n        \n        { generatorType === 1 &&\n            <>\n                <div>\n                    <label>A:</label>\n                    <input \n                        type='number' \n                        value={a}\n                        onChange={(e)=>{\n                            setA(Number.parseInt(e.target.value));\n                        }}\n                        />\n                </div>\n                <div>\n                    <label>B:</label>\n                    <input \n                        type='number' \n                        value={b}\n                        onChange={(e)=>{\n                            setB(Number.parseInt(e.target.value));\n                        }}\n                        />\n                </div>\n            </>\n        }\n        { generatorType === 3 &&\n            <>\n                <div>\n                    <label>µ:</label>\n                    <input \n                        type='number' \n                        value={media}\n                        onChange={(e)=>{\n                            setMedia(Number.parseInt(e.target.value));\n                        }}\n                        />\n                </div>\n                <div>\n                    <label>δ:</label>\n                    <input \n                        type='number' \n                        value={desviacion}\n                        onChange={(e)=>{\n                            setDesviacion(Number.parseInt(e.target.value));\n                        }}\n                        />\n                </div>\n            </>\n        }\n        { (generatorType === 2 || generatorType === 4) &&\n            <>\n                <div>\n                    <label>λ:</label>\n                    <input \n                        type='number' \n                        value={lambda}\n                        onChange={(e)=>{\n                            setLambda(Number.parseInt(e.target.value));\n                        }}\n                        />\n                </div>                \n            </>\n        }\n        { generadorInstance &&\n            <>\n                <div>\n                    <label>GRADOS DE LIBERTAD (v):</label>\n                    <input \n                        type='number'\n                        disabled={true}\n                        value={generadorInstance.getGradosLibertad()}                        \n                        />\n                </div>\n            </>\n        }              \n                    \n        \n    </div>\n    \n    <div>\n        <div style={{\n            width:'48%',\n            display:'inline-block',\n            verticalAlign:'top'\n        }}>\n            <h2>Muestra</h2>\n            <table>\n                <thead>\n                    <th>i</th>\n                    <th>Xi</th>\n                </thead>\n                <tbody>\n                {muestra.map( (item,i) => (\n                    <tr>\n                        <td>{i+1}</td><td>{item}</td>\n                    </tr>))}\n                </tbody>\n            </table>\n        </div>\n        <div style={{\n            width:'50%',\n            display:'inline-block',\n            marginLeft:'1em',\n        }}>\n        <table>\n            <thead>\n                <th>i</th>\n                <th>Min</th>\n                <th>Max</th>\n                <th>MC</th>\n                <th>FO</th>\n                <th>FE</th>\n                <th>FO-FE</th>\n                <th>(FO-FE)^2</th>\n                <th>(FO-FE)^2/FE</th>\n                <th>C = Σ (FO-FE)^2/FE </th>\n            </thead>\n            <tbody>\n                {rows.map((row,i)=>(<tr>\n                    <td>{i+1}</td>\n                    <td>{row.min}</td>\n                    <td>{row.max}</td>\n                    <td>{row.mc}</td>\n                    <td>{row.fo}</td>\n                    <td>{row.fe}</td>\n                    <td>{row.col1}</td>\n                    <td>{row.col2}</td>\n                    <td>{row.col3}</td>\n                    <td>{row.c}</td>\n                </tr>))}\n            </tbody>\n        </table>\n        <Bar data={chartData}/>\n        </div>\n    </div>\n    </>);\n}\n\nexport default TP3;","import logo from './logo.svg';\nimport './App.css';\nimport TP3 from './pages/TP3';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TP3 />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}